module Tribu(...)where

data Tribu = MkT (Heap Persona)(Set Persona)
import Heap 
import Set
--Inv.Rep.:
----Los elementos de la heap u el ser son los mismos
-----y la heap y el set tienen el mismo tamaÃ±o
agregar:: Persona -> Tribu -> Tribu --0(log n)
agregar p (MkT h s) = (MkT(insertH p h)(add p h))

esDeLaTribu:: Persona -> Tribu -> Bool --o(log n)
esDeLaTribu p (MkT h s) = belongs p s


desterarJoven:: Tribu -> Tribu --0(log n)
desterarJoven (MkT h s) = (MkT(deleteMin h)(remove s))

elMasJoven::Tribu -> Persona --0(1)
elMasJoven (MkT h s) = findMin h

deMenoraMayor::Tribu -> [Persona] --0(n . log n )
deMenoraMayor (MkT h s) = if isEmptyH h 
							then []
							else findMin h : (deMenoraMayor deleteMin h) 


--Devuelve a las personas mayores a cierto numero de menor a mayor
losMayoresA::Int -> Tribu -> [Persona] --0(n . log n)
losMayoresA n (MkT h s) = if (isEmptyH h) && (findMin h) > n
							then deleteMin h
								else findMin h : (losMayoresA deleteMin h)

--losMayoresA n tribu = filtrarMenoresA n (deMenoraMayor tribu)

filtrarMenoresA :: Int -> [Persona] -> [Persona]								
filtrarMenoresA n [] = n
filtrarMenoresA n (x:xs) = if (edad x < n)
							then filtrarMenoresA n xs
							else x:xs


--Como Usuario
dropNJovens::Int -> Tribu -> Tribu
--percondicion hay n jovenes
dropNJovens n 



elMasViejo::Tribu -> Persona


mapearEdades::Tribu -> Map Persona Int							